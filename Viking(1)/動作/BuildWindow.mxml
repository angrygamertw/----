<?xml version="1.0" encoding="UTF-8"?>
<mx:CanvasWithPopUp xmlns:mx="http://www.adobe.com/2006/mxml" height="567" width="750" creationComplete="{init();}">
	<mx:Script><![CDATA[
        import com.kbmj.viking.lib.*;
        import com.kbmj.viking.view.*;
        import com.kbmj.viking.vo.*;
        import com.kbmj.viking.vo.home.*;
        import flash.events.*;
        import flash.utils.*;
        import mx.binding.*;
        import mx.collections.*;
        import mx.containers.*;
        import mx.controls.*;
        import mx.core.*;
        import mx.events.*;
        import mx.managers.*;

        private var  selectedConstruction:ConstructionVO;
        private var  _homeBuildings:Array;
        private var  selectedUnitId:int;
        private var  _buildings:Object;
        private var  _constructions:Array;
        private var  _confirmBuildWindow:ConfirmBuildWindow;
        private var  _playerRank:int;
        public var  selectUnitId:int;
        private var  _buildUnitWindow:BuildUnitWindow;
        public var  selectBuildName:String;
        public static const  OPEN_WINDOW:String = NAME + "openwindow";
        public static const  OPEN_UNIT_LIST:String = NAME + "openUnitList";
        public static const  SELECT_BUILDING_CLOSE:String = NAME + "selectBuildingClose";
        public static const  CLOSE_UNIT_LIST:String = NAME + "closeUnitList";
        private static const  ABILITY_LABELS:Object = {strength:"力", intelligence:"賢さ", tech:"技", agility:"速", defense:"守", luck:"運"};
        public static const  NAME:String = "buildWindow";


        public function getAbilities(param1:Object) : String
        {
            var _loc_3:String = null;
            var _loc_2:String = "";
            for (_loc_3 in param1)
            {
                
                _loc_2 = _loc_2 + (ABILITY_LABELS[_loc_3] + ":" + param1[_loc_3] + "\n");
            }
            return _loc_2;
        }// end function

        public function getGridVisible(param1:Object, param2:int) : Boolean
        {
            return param1.requirement.materials[param2].required ? (true) : (false);
        }// end function

        public function init() : void
        {
            _buildUnitWindow.addEventListener(BuildUnitWindow.UNIT_SELECTED, confirmBuildHandler);
            return;
        }// end function

        public function getColor(param1:Object, param2:int) : uint
        {
            return param1.requirement.materials[param2].isShort ? (15073298) : (0);
        }// end function

        public function getMaterialsSize(param1:Object, param2:int) : String
        {
            return param1.requirement.materials[param2].required;
        }// end function

        public function toolTipBuilding(event:ToolTipEvent, param2:Object) : void
        {
            var _loc_3:* = new BuildingMouseOver();
            _loc_3.description = param2.description;
            event.toolTip = _loc_3;
            return;
        }// end function

        public function xOrder(param1:ConstructionVO, param2:ConstructionVO) : int
        {
            if (param1.code > param2.code)
            {
                return 1;
            }
            if (param1.code < param2.code)
            {
                return -1;
            }
            return 0;
        }// end function

        public function toolTipBuildingButton(event:ToolTipEvent, param2:Object) : void
        {
            var _loc_3:* = new ButtonMouseOver();
            _loc_3.abilityColor = param2.requirement.textAbilityColor;
            _loc_3.goldColor = param2.requirement.textGoldColor;
            _loc_3.abilities = param2.abilities;
            _loc_3.materials = param2.requirement.materials;
            _loc_3.days = param2.days;
            _loc_3.gold = param2.gold;
            _loc_3.constructionName = param2.nameLabel;
            event.toolTip = _loc_3;
            return;
        }// end function

        public function onClose() : void
        {
            sendEvent(SELECT_BUILDING_CLOSE);
            PopUpManager.removePopUp(this);
            return;
        }// end function

        public function confirmBuildHandler(event:PopupEvent) : void
        {
            var materialVO:MaterialVO;
            var e:* = event;
            PopUpManager.removePopUp(_buildUnitWindow);
            var materialText:* = selectedConstruction.gold + "文\n";
            var _loc_3:int = 0;
            var _loc_4:* = selectedConstruction.materials;
            while (_loc_4 in _loc_3)
            {
                
                materialVO = _loc_4[_loc_3];
                materialText = materialText + (materialVO.nameLabel + ":" + materialVO.quantity + "\n");
            }
            confirmBuildWindow.buildDetail = {constructionName:selectedConstruction.nameLabel, days:selectedConstruction.minutes, materials:materialText, unit:e.param.unit};
            selectedUnitId = e.param.unit.unitId;
            if (!confirmBuildWindow.hasEventListener(ConfirmBuildWindow.CONFIRMED))
            {
                confirmBuildWindow.addEventListener(ConfirmBuildWindow.CONFIRMED, function (event:Event) : void
            {
                dispatchEvent(new PopupEvent(Viking.HOME_BUILD_START, {buildingName:selectBuildName, unitId:selectedUnitId, buildingCode:selectedConstruction.code}));
                onClose();
                confirmBuildWindow.removeEventListener(ConfirmBuildWindow.CONFIRMED, arguments.callee);
                return;
            }// end function
            );
            }
            this.popupWindow(confirmBuildWindow, false);
            dispatchEvent(new Event(OPEN_WINDOW));
            return;
        }// end function

        public function onClick(param1:Object) : void
        {
            var alertWindow:AlertWindow;
            var construction:* = param1;
            if (!construction.requirement.canBuild)
            {
                return;
            }
            var arr:* = new Array();
            arr = _homeBuildings.filter(function (param1, param2:int, param3:Array) : Boolean
            {
                if (param1.buildingVO)
                {
                    return param1.buildingVO.nameLabel == construction.nameLabel ? (true) : (false);
                }
                return false;
            }// end function
            );
            if (construction.maxBuild > arr.length)
            {
                selectedConstruction = construction as ConstructionVO;
                selectBuildName = construction.name;
                _buildUnitWindow.init(units, selectedConstruction);
                this.popupWindow(_buildUnitWindow, false);
                _buildUnitWindow.addEventListener(BuildUnitWindow.CLOSE_UNIT_LIST, function () : void
            {
                _buildUnitWindow.removeEventListener(BuildUnitWindow.CLOSE_UNIT_LIST, arguments.callee);
                sendEvent(CLOSE_UNIT_LIST);
                return;
            }// end function
            );
                sendEvent(OPEN_UNIT_LIST);
            }
            else
            {
                alertWindow = AlertWindow.show(construction.nameLabel + "は\nこれ以上建築出来ません。");
                popupWindow(alertWindow, false);
            }
            return;
        }// end function

        public function _BuildWindow_ClassFactory1_c() : ClassFactory
        {
            var _loc_1:* = new ClassFactory();
            _loc_1.generator = BuildDitailRenderer;
            return _loc_1;
        }// end function

        public function getBuildingDescription(param1:Object) : String
        {
            var _loc_2:Object = null;
            for each (_loc_2 in _buildings)
            {
                
                if (_loc_2.name == param1.name)
                {
                    return _loc_2.description;
                }
            }
            return null;
        }// end function

        public function getMaterials(param1:Object, param2:int) : String
        {
            return param1.requirement.materials[param2].vo.nameLabel;
        }// end function
    ]]></mx:Script>

	<mx:Canvas id="windowLayer"/>
	<mx:Canvas id="buildingsCanvas">
		<mx:Text text="建築" styleName="PanelBaseTitle" x="350" y="80"/>
		<mx:Image y="80" x="710" source="_embed_mxml__swf_common_button_close_window_swf_1370265653" click="{onClose();}"/>
		<mx:TileList id="taskList" itemRenderer="_BuildWindow_ClassFactory1_c()" styleName="InfoBoxTab" selectable="false" height="420" width="740" x="0" y="110" backgroundAlpha="0" dataProvider='{viewDataBuilding}'/>
	</mx:Canvas>

</mx:CanvasWithPopUp>
